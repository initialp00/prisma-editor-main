name: Deploy to Production

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30
    env:
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
      GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Set DATABASE_URL
        run: |
          echo "DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@db:5432/postgres" >> $GITHUB_ENV

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: prisma-editor:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DATABASE_URL=${{ env.DATABASE_URL }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            GITHUB_CLIENT_ID=${{ secrets.AUTH_GITHUB_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            OPEN_AI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

      - name: Save Docker image
        run: docker save -o prisma-editor.tar prisma-editor:latest

      - name: Prepare Docker Compose file
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          envsubst < ./docker-compose.yml > ./docker-compose.resolved.yml

      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER_ADDRESS }} >> ~/.ssh/known_hosts

      - name: Transfer Docker image and compose file to server
        run: |
          scp -o StrictHostKeyChecking=no prisma-editor.tar ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }}:${{ secrets.REMOTE_SERVER_PATH }}
          scp -o StrictHostKeyChecking=no docker-compose.resolved.yml ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }}:${{ secrets.REMOTE_SERVER_PATH }}/docker-compose.yml

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }} << 'ENDSSH'
          cd ${{ secrets.REMOTE_SERVER_PATH }}
          docker load -i prisma-editor.tar
          docker compose down
          docker compose up -d
          ENDSSH

      - name: Cleanup resources
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }} "cd ${{ secrets.REMOTE_SERVER_PATH }} && rm prisma-editor.tar && docker container prune -f && docker image prune -f" 